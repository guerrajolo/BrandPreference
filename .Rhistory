training <- CompleteResponses[inTraining,]
testing <- CompleteResponses[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 10, list = FALSE )
print(M0D)
varImp(M0D)
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, y=salary, col=brand)) +
geom_point() +
geom_smooth()
CompleteResponses$elevel
str(CompleteResponses$elevel)
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
CompleteResponses$car
str(CompleteResponses$car)
CompleteResponses$car <- as.factor(CompleteResponses$car)
CompleteResponses$brand
str(CompleteResponses$brand)
CompleteResponses$brand <- as.factor(CompleteResponses$brand)
CompleteResponses$zipcode <- as.factor(CompleteResponses$zipcode)
CompleteResponses$age <- as.numeric(CompleteResponses$age)
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 10, list = FALSE )
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 10, list = FALSE )
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 10, list = FALSE )
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength =2, list = FALSE )
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, y=salary, col=brand)) +
geom_point() +
geom_smooth()
library(ggplot2)
ggplot(CompleteResponses, x=zipcode y=count.fields(brand)) + geom_point()
library(ggplot2)
ggplot(CompleteResponses, x=zipcode y= count.fields(brand)) + geom_point()
library(ggplot2)
ggplot(CompleteResponses, x=zipcode y= count.fields(brand)) + geom_histogram()
library(ggplot2)
ggplot(CompleteResponses, x=zipcode y= count.fields(brand)) + geom_histogram()
library(ggplot2)
ggplot(CompleteResponses, x=zipcode y = count.fields(brand)) + geom_histogram()
library(ggplot2)
ggplot(CompleteResponses, aes(x=zipcode y = count.fields(brand)) + geom_histogram()
library(ggplot2)
ggplot(CompleteResponses, aes(x=zipcode, fill=brand)) + geom_histogram(color="black", bins=20)
ggplot(CompleteResponses, aes(x=zipcode, fill=brand)) + geom_histogram(color="black", bins=20)
library(ggplot2)
ggplot(CompleteResponses, aes(x=zipcode, fill=brand)) + geom_histogram(color="black", bins=1)
library(ggplot2)
ggplot(CompleteResponses, aes(x=salary, fill=brand)) + geom_histogram(color="black", bins=1)
library(ggplot2)
ggplot(CompleteResponses, aes(x=salary, fill=brand)) + geom_histogram(color="black", bins=5)
library(ggplot2)
ggplot(CompleteResponses, aes(x=salary, fill=brand)) + geom_histogram(color="black", bins=20)
library(ggplot2)
ggplot(CompleteResponses, aes(x=elevel, fill=brand)) + geom_histogram(color="black", bins=20)
ggplot(CompleteResponses, aes(x=zipcode, fill=brand)) + geom_histogram(color="black", bins=20)
library(ggplot2)
ggplot(CompleteResponses, aes(x=count.fields(zipcode), fill=brand)) + geom_histogram(color="black", bins=20)
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=20)
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=10)
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength =2, list = FALSE )
M0D
print(M0D)
M0D
print(M0D)
varImp(M0D)
PRED1 <- predict(M0D, testing)
PRED1
PRED1
head(testing)
confusionMatrix(PRED1, testing$brand)
---
title: "Brand Preference"
output: github_document
---
###IMPORT DATASET
```{r}
CompleteResponses <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv")
SurveyIncomplete <- read.csv("~/Desktop/UBIQUM/SurveyIncomplete.csv")
```
```{r}
library(caret)
library(ggplot2)
```
###EDUCATION LEVEL AS INTEGER
```{r include=FALSE}
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
CompleteResponses$car <- as.factor(CompleteResponses$car)
CompleteResponses$brand <- as.factor(CompleteResponses$brand)
CompleteResponses$zipcode <- as.factor(CompleteResponses$zipcode)
CompleteResponses$age <- as.numeric(CompleteResponses$age)
```
```{r}
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, y=salary, col=brand)) +
geom_point() +
geom_smooth()
```
```{r}
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=10)
```
# define an 75%/25% train/test split of the dataset
```{r}
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- CompleteResponses[inTraining,]
testing <- CompleteResponses[-inTraining,]
```
#10 fold cross validation
```{r}
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
```
#train Random Forest Regression model with a tuneLenght = 1
#(trains with 1 mtry value for RandomForest)#
```{r eval=FALSE, include=FALSE}
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength =2, list = FALSE )
M0D
print(M0D)
```
#  7424 samples
#  6 predictor
#  2 classes: '0', '1'
#  Accuracy   Kappa
#  0.9220084  0.8349224   --> by increasing to 10 the tunelenght the best accuracy (with 31 mkty is 0.91)
```{r eval=FALSE, include=FALSE}
varImp(M0D)
```
#Overall
#salary	100.0000000
#age	87.8058098
#credit	8.1733756
###APPLY MODEL TO TESTSET
```{r eval=FALSE, include=FALSE}
PRED1 <- predict(M0D, testing)
PRED1
```
################Overall
#salary  100.00000
#age      57.40333
#credit   13.27571
#zipcode   5.35328
#elevel    3.82464
#car15     0.24398
################
```{r}
head(testing)
```
```{r}
confusionMatrix(PRED1, testing$brand)
```
################
#Prediction    0    1
#          0  840  108
#          1   96 1430
#Accuracy : 0.9175
#95% CI : (0.906, 0.9281)
#No Information Rate : 0.6217
#P-Value [Acc > NIR] : <2e-16
#Kappa : 0.8251
#Mcnemar's Test P-Value : 0.4412
M0D
PRED1 <- predict(M0D, testing)
PRED1
confusionMatrix(PRED1, testing$brand)
M0D
print(M0D)
varImp(M0D)
PRED1
PRED1
PRED1
confusionMatrix(PRED1, testing$brand)
PRED1
confusionMatrix(PRED1, testing$brand)
PRED1 <- predict(M0D, testing)
PRED1
summary(PRED1)
PRED1 <- predict(M0D, testing)
PRED1 <- predict(M0D, testing)
summary(PRED1)
summary(PRED1)
PRED1 <- predict(M0D, testing)
summary(PRED1)
confusionMatrix(PRED1, testing$brand)
ConfusionM <- confusionMatrix(PRED2, testing$brand)
M0D
print(M0D)
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 2, list = FALSE )
print(M0D)
PRED1 <- predict(M0D, testing)
summary(PRED1)
confusionMatrix(PRED1, testing$brand)
MODC5 <- train(brand~., data = training, method = "C5.0", trControl=fitControl, tuneLength = 10, list = FALSE)
MODC5 <- train(brand~., data = training, method = "C5.0", trControl=fitControl, tuneLength = 10, list = FALSE)
###IMPORT DATASET
CompleteResponses <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv")
###EDUCATION LEVEL AS INTEGER
CompleteResponses$elevel
str(CompleteResponses$elevel)
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
str(CompleteResponses$elevel)
CompleteResponses$car
str(CompleteResponses$car)
CompleteResponses$car <- as.factor(CompleteResponses$car)
str(CompleteResponses$car)
CompleteResponses$brand
str(CompleteResponses$brand)
CompleteResponses$brand <- as.factor(CompleteResponses$brand)
str(CompleteResponses$brand)
CompleteResponses$zipcode <- as.factor(CompleteResponses$zipcode)
CompleteResponses$age <- as.numeric(CompleteResponses$age)
#load library and set seed
library(caret)
set.seed(998)
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- CompleteResponses[inTraining,]
testing <- CompleteResponses[-inTraining,]
#10 fold cross validation
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
#train Random Forest Regression model with a tuneLenght = 1
#(trains with 1 mtry value for RandomForest)#
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 10, list = FALSE )
###M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 2, list = FALSE )
### The Accuracy and the Kappa returned by using tunelenght = 10 does not provide significantly better outputs.
print(M0D)
#  7424 samples
#  6 predictor
#  2 classes: '0', '1'
#  Accuracy   Kappa
#  0.9220084  0.8349224
varImp(M0D)
#Overall
#salary  100.00000
#age      60.50764
# credit   13.71266
###APPLY MODEL TO TESTSET
PRED1 <- predict(M0D, testing)
PRED1
summary(PRED1)
#to ascertain how the model prioritized each feature in the training
varImp(M0D)
################Overall
#salary  100.00000
#age      57.40333
#credit   13.27571
#zipcode   5.35328
#elevel    3.82464
#car15     0.24398
################
head(testing)
confusionMatrix(PRED1, testing$brand)
################
#Prediction    0    1
#          0  840  108
#          1   96 1430
#Accuracy : 0.9175
#95% CI : (0.906, 0.9281)
#No Information Rate : 0.6217
#P-Value [Acc > NIR] : <2e-16
#Kappa : 0.8251
#Mcnemar's Test P-Value : 0.4412
################
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, y=salary, col=brand)) +
geom_point() +
geom_smooth()
>x <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv",header=T,sep=",")
>x2 <- read.csv("data2.csv",header=T,sep=",")
x <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv", header=T,sep=",")
x2 <- read.csv("../Desktop/UBIQUM/SurveyIncomplete.csv", header=T, sep=",")
TotalPreference <- rbind(x,x2)
TotalPreference
TotalPreference <- rbind(x,x2)
TotalPreference
PRED2 <- predict(MODC5, testing)
PRED2
summary(PRED2)
PRED2 <- predict(MODC5, SurveyIncomplete)
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
CompleteResponses$car <- as.factor(CompleteResponses$car)
CompleteResponses$brand <- as.factor(CompleteResponses$brand)
CompleteResponses$zipcode <- as.factor(CompleteResponses$zipcode)
CompleteResponses$age <- as.numeric(CompleteResponses$age)
SurveyIncomplete$elevel <- as.integer(SurveyIncomplete$elevel)
SurveyIncomplete$car <- as.factor(SurveyIncomplete$car)
SurveyIncomplete$brand <- as.factor(SurveyIncomplete$brand)
SurveyIncomplete$zipcode <- as.factor(SurveyIncomplete$zipcode)
SurveyIncomplete$age <- as.numeric(SurveyIncomplete$age)
PRED2 <- predict(MODC5, SurveyIncomplete)
PRED2 <- predict(MODC5, SurveyIncomplete)
PRED2
summary(PRED2)
CompleteResponses <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv")
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
CompleteResponses$car <- as.factor(CompleteResponses$car)
CompleteResponses$brand <- as.factor(CompleteResponses$brand)
CompleteResponses$zipcode <- as.factor(CompleteResponses$zipcode)
CompleteResponses$age <- as.numeric(CompleteResponses$age)
library(caret)
set.seed(998)
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- CompleteResponses[inTraining,]
testing <- CompleteResponses[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 2, list = FALSE )
print(M0D)
PRED1 <- predict(M0D, testing)
PRED1
summary(PRED1)
PRED2 <- predict(MODC5, SurveyIncomplete)
PRED2
summary(PRED2)
SurveyIncomplete$brand <- PRED2
SurveyIncomplete$brand <- PRED2
x <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv", header=T,sep=",")
x2 <- read.csv("../Desktop/UBIQUM/SurveyIncomplete.csv", header=T, sep=",")
TotalPreference <- rbind(x,x2)
TotalPreference
SurveyIncomplete$TotalPreference <- rbind(x,x2)
TotData <-rbind(SurveyIncomplete, CompleteResponses)
CompleteResponses <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv")
SurveyIncomplete <- read.csv("~/Desktop/UBIQUM/SurveyIncomplete.csv")
library(caret)
library(ggplot2)
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
CompleteResponses$car <- as.factor(CompleteResponses$car)
CompleteResponses$brand <- as.factor(CompleteResponses$brand)
CompleteResponses$zipcode <- as.factor(CompleteResponses$zipcode)
CompleteResponses$age <- as.numeric(CompleteResponses$age)
SurveyIncomplete$elevel <- as.integer(SurveyIncomplete$elevel)
SurveyIncomplete$car <- as.factor(SurveyIncomplete$car)
SurveyIncomplete$brand <- as.factor(SurveyIncomplete$brand)
SurveyIncomplete$zipcode <- as.factor(SurveyIncomplete$zipcode)
SurveyIncomplete$age <- as.numeric(SurveyIncomplete$age)
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, y=salary, col=brand)) +
geom_point() +
geom_smooth()
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=10)
TotData <-rbind(SurveyIncomplete, CompleteResponses)
TotData <-rbind(SurveyIncomplete, CompleteResponses)
TotData
View(TotData)
/ getOption("max.print")
ConfusionM <- confusionMatrix(PRED2, testing$brand)
CompleteResponses$brand <- as.factor(CompleteResponses$brand)
TotData$brand
attributes(TotData$brand)
summary(TotData$brand)
SurveyIncomplete$brand <- PRED2
SurveyIncomplete$brand <- PRED2
TotData <-rbind(SurveyIncomplete, CompleteResponses)
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 2, list = FALSE )
CompleteResponses <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv")
SurveyIncomplete <- read.csv("~/Desktop/UBIQUM/SurveyIncomplete.csv")
library(caret)
library(ggplot2)
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
CompleteResponses$car <- as.factor(CompleteResponses$car)
CompleteResponses$brand <- as.factor(CompleteResponses$brand)
CompleteResponses$zipcode <- as.factor(CompleteResponses$zipcode)
CompleteResponses$age <- as.numeric(CompleteResponses$age)
SurveyIncomplete$elevel <- as.integer(SurveyIncomplete$elevel)
SurveyIncomplete$car <- as.factor(SurveyIncomplete$car)
SurveyIncomplete$brand <- as.factor(SurveyIncomplete$brand)
SurveyIncomplete$zipcode <- as.factor(SurveyIncomplete$zipcode)
SurveyIncomplete$age <- as.numeric(SurveyIncomplete$age)
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, y=salary, col=brand)) +
geom_point() +
geom_smooth()
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=10)
#With this graph we can easily see how the age and the salary identify macro differences in the
#average customer brand preferences.
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- CompleteResponses[inTraining,]
testing <- CompleteResponses[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 2, list = FALSE )
str(MOD5C)
print(MODC5)
PRED2
summary(PRED2)
summary(PRED2)
postResample <- postResample(PRED2, testing$brand)
postResample
varImp(M0D)
confusionMatrix(PRED1, testing$brand)
summary(TotData$brand)
TotData <-rbind(SurveyIncomplete, CompleteResponses)
CompleteResponses <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv")
SurveyIncomplete <- read.csv("~/Desktop/UBIQUM/SurveyIncomplete.csv")
library(caret)
library(ggplot2)
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
CompleteResponses$car <- as.factor(CompleteResponses$car)
CompleteResponses$brand <- as.factor(CompleteResponses$brand)
CompleteResponses$zipcode <- as.factor(CompleteResponses$zipcode)
CompleteResponses$age <- as.numeric(CompleteResponses$age)
SurveyIncomplete$elevel <- as.integer(SurveyIncomplete$elevel)
SurveyIncomplete$car <- as.factor(SurveyIncomplete$car)
SurveyIncomplete$brand <- as.factor(SurveyIncomplete$brand)
SurveyIncomplete$zipcode <- as.factor(SurveyIncomplete$zipcode)
SurveyIncomplete$age <- as.numeric(SurveyIncomplete$age)
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, y=salary, col=brand)) +
geom_point() +
geom_smooth()
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=10)
#With this graph we can easily see how the age and the salary identify macro differences in the
#average customer brand preferences.
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- CompleteResponses[inTraining,]
testing <- CompleteResponses[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 2, list = FALSE )
#train Random Forest Regression model with a tuneLenght = 2
TotData <-rbind(SurveyIncomplete, CompleteResponses)
TotData
TotData$brand
attributes(TotData$brand)
summary(TotData)
varImp(MODC5)
TotData <-rbind(SurveyIncomplete, CompleteResponses)
CompleteResponses <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv")
SurveyIncomplete <- read.csv("~/Desktop/UBIQUM/SurveyIncomplete.csv")
library(caret)
library(ggplot2)
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
CompleteResponses$car <- as.factor(CompleteResponses$car)
CompleteResponses$brand <- as.factor(CompleteResponses$brand)
CompleteResponses$zipcode <- as.factor(CompleteResponses$zipcode)
CompleteResponses$age <- as.numeric(CompleteResponses$age)
SurveyIncomplete$elevel <- as.integer(SurveyIncomplete$elevel)
SurveyIncomplete$car <- as.factor(SurveyIncomplete$car)
SurveyIncomplete$brand <- as.factor(SurveyIncomplete$brand)
SurveyIncomplete$zipcode <- as.factor(SurveyIncomplete$zipcode)
SurveyIncomplete$age <- as.numeric(SurveyIncomplete$age)
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, y=salary, col=brand)) +
geom_point() +
geom_smooth()
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=10)
#With this graph we can easily see how the age and the salary identify macro differences in the
#average customer brand preferences.
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=5)
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=20)
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=9)
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=10)
ggplot(CompleteResponses, aes(x=zipcode, y=elevel col=brand)) +
library(ggplot2)
ggplot(CompleteResponses, aes(x=age, fill=brand)) + geom_histogram(color="black", bins=10)
#With this graph we can easily see how the age and the salary identify macro differences in the
#average customer brand preferences.
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- CompleteResponses[inTraining,]
testing <- CompleteResponses[-inTraining,]
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 2)
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 2, list = FALSE )
#train Random Forest Regression model with a tuneLenght = 2
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 2, list = FALSE )
MODC5 <- train(brand~., data = training, method = "C5.0", trControl=fitControl, tuneLength = 10, list = FALSE)
source('~/LASTTASK/ScriprBrandC5.0.R', echo=TRUE)
print(MODC5)
M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 2, list = FALSE )
#train Random Forest Regression model with a tuneLenght = 2
M0D
varImp(M0D)
install.packages("fastGraph")
hist(CompleteResponses$salary, breaks = 1000)
hist(CompleteResponses$salary, breaks = 10000)
hist(CompleteResponses$salary, breaks = 100)
hist(CompleteResponses$age, breaks = 100)
hist(CompleteResponses$age, breaks = 100)
ggplot(CompleteResponses, aes(x = car, fill = brand)) + geom_bar(colour = "black")
ggplot(CompleteResponses, aes(x = credit, fill = brand)) + geom_histogram(colour = "black")
?bin
??bin
saveRDS("M0D", file = "my_M0D.rds")
saveRDS(MODC5, file = "my_C5.rds")
readRDS(file = "my_M0D.rds")
saveRDS("MODC5", file = "my_C5.rds")
#train Random Forest Regression model with a tuneLenght = 2
readRDS(file = "my_C5.rds")
save(M0D, file = "data.RData")
print(M0D)
save(MODC5, file = "dataMOD5C.RData")
readRDS(file = "my_C5.rds")
save(MODC5, file = "dataMOD5C.RData")
readRDS(file = "my_C5.rds")
save(M0D, file = "dataMOD.RData")
#train Random Forest Regression model with a tuneLenght = 2
readRDS(file = "dataMOD.RData")
readRDS(file = "dataMOD.RData")
readRDS(dataMOD5C.RData)
#train Random Forest Regression model with a tuneLenght = 2
load(dataMOD5C.RData)
load(dataMOD5C.RData)
save(MODC5, file = "dataMOD5C.RData")
load(dataMOD5C.RData)
load("dataMOD5C.RData")
show(dataMOD5C.RData)
load("dataMOD5C.RData")
View(MODC5)
dataMOD5C
load("dataMOD.RData")
?count_if
??count_if
