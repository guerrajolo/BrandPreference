library(readr)
SurveyIncomplete <- read_csv("~/Desktop/SurveyIncomplete.csv")
View(SurveyIncomplete)
hist(SurveyIncomplete, $age $car)
hist(SurveyIncomplete, $car)
hist(SurveyIncomplete)
library(readr)
CompleteResponses <- read_csv("~/Desktop/CompleteResponses.csv")
View(CompleteResponses)
View(CompleteResponses)
View(CompleteResponses)
View(SurveyIncomplete)
summary(SurveyIncomplete)
hist(x, breaks = "Sturges",
freq = NULL, probability = !freq,
include.lowest = TRUE, right = TRUE,
density = NULL, angle = 45, col = NULL, border = NULL,
main = paste("Histogram of" , xname),
xlim = range(breaks), ylim = NULL,
xlab = xname, ylab,
axes = TRUE, plot = TRUE, labels = FALSE,
nclass = NULL, warn.unused = TRUE, ...)
hist(x, breaks = "age",
freq = NULL, probability = !freq,
include.lowest = TRUE, right = TRUE,
density = NULL, angle = 45, col = NULL, border = NULL,
main = paste("Histogram of" , xname),
xlim = range(breaks), ylim = NULL,
xlab = xname, ylab,
axes = TRUE, plot = TRUE, labels = FALSE,
nclass = NULL, warn.unused = TRUE, ...)
hist(x, breaks = "age - car",
freq = NULL, probability = !freq,
include.lowest = TRUE, right = TRUE,
density = NULL, angle = 45, col = NULL, border = NULL,
main = paste("Histogram of" , xname),
xlim = range(breaks), ylim = NULL,
xlab = xname, ylab,
axes = TRUE, plot = TRUE, labels = FALSE,
nclass = NULL, warn.unused = TRUE, ...)
hist(CompleteResponses$age)
-- LOADING DATA ----
mydataset <- CompleteResponses
cor(CompleteResponses)
names(CompleteResponses)
CompleteResponses[,c(1,2,6)]
cor(CompleteResponses[,c(1,2,6)])
str(CompleteResponses)
df <- CompleteResponses
df
str(df)
df$elevel
str(df$elevel)
df$elevel <- as.factor(df$elevel)
str(df$elevel)
df$elevel <- as.numerical(df$elevel)
df$elevel <- as.integer(df$elevel)
str(df$elevel)
swirl()
library(swirl, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
swirl()
hist(cars)
install.packages("rmarkdown")
hist(mydataset)
cor(mydataset)
plot(credit)
plot(mydataset)
swirl()
swirl()
library(caret, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(readr)
CompleteResponses <- read_csv("~/Desktop/UBIQUM/CompleteResponses.csv")
View(CompleteResponses)
hist(age)
hist(CompleteResponses$age)
CompleteResponses$car <-as.factor(CompleteResponses$car)
CompleteResponses$car <-as.factor(CompleteResponses$age)
hist(CompleteResponses$car)
CompleteResponses$car <-as.factor(CompleteResponses$car)
hist(CompleteResponses$car)
nclass = NULL, warn.unused = TRUE, ...)
hist(CompleteResponses$age)
-- LOADING DATA ----
mydataset <- CompleteResponses
cor(CompleteResponses)
names(CompleteResponses)
CompleteResponses[,c(1,2,6)]
cor(CompleteResponses[,c(1,2,6)])
str(CompleteResponses)
df <- CompleteResponses
df
str(df)
df$elevel
str(df$elevel)
df$elevel <- as.factor(df$elevel)
str(df$elevel)
df$elevel <- as.numerical(df$elevel)
cor(CompleteResponses)
names(CompleteResponses)
CompleteResponses[,c(1,2,6)]
cor(CompleteResponses[,c(1,2,6)])
str(CompleteResponses)
df <- CompleteResponses
df
str(df)
df$elevel
str(df$elevel)
df$elevel <- as.factor(df$elevel)
str(df$elevel)
df$elevel <- as.numerical(df$elevel)
df$elevel <- as.integer(df$elevel)
str(df$elevel)
swirl()
quit
cor(CompleteResponses)
names(CompleteResponses)
CompleteResponses[,c(1,2,6)]
cor(CompleteResponses[,c(1,2,6)])
str(CompleteResponses)
cor(CompleteResponses)
names(CompleteResponses)
names(CompleteResponses)
CompleteResponses <- [,c(1,2,6)]
CompleteResponses[,c(1,2,6)]
CompleteResponses=[,c(1,2,6)]
CompleteResponses= [,c(1,2,6)]
CompleteResponses = [,c(1,2,6)]
CompleteResponseS[,c(1,2,6)]
CompleteResponses[,c(1,2,6)]
cor(CompleteResponses[,c(1,2,6)])
show(d)
show(df)
df$elevel <- as.integer(df$elevel)
str(df$elevel)
df$elevel
CompleteResponses[,c(1,2,6)]
library(swirl, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
swirl()
df$elevel <- as.integer(df$elevel)
-- LOADING DATA ----
mydataset <- CompleteResponses
cor(CompleteResponses)
names(CompleteResponses)
CompleteResponses[,c(1,2,6)]
cor(CompleteResponses[,c(1,2,6)])
str(CompleteResponses)
df <- CompleteResponses
> cor(CompleteResponses[,c(1,2,6)])
salary          age       credit
salary  1.000000000  0.007978566 -0.025126808
age     0.007978566  1.000000000 -0.004400692
credit -0.025126808 -0.004400692  1.000000000
df$elevel
str(df$elevel)
df$elevel <- as.integer(df$elevel)
str(df$elevel)
df$elevel <- as.numerical(df$elevel)
df$elevel <- as.integer(df$elevel)
str(df$elevel)
cor(CompleteResponses[,c(1,2,6)])
str(df$elevel)
cor(CompleteResponses)
-- LOADING DATA ----
mydataset <- CompleteResponses
mydataset <- CompleteResponses
cor(CompleteResponses)
cor(mydataset)
mydataset <- CompleteResponses
cor(CompleteResponses)
names(CompleteResponses)
CompleteResponses[,c(1,2,6)]
cor(CompleteResponses[,c(1,2,6)])
str(CompleteResponses)
df <- CompleteResponses
> cor(CompleteResponses[,c(1,2,6)])
> cor(CompleteResponses[,c(1,2,6)])
str(CompleteResponses)
df <- CompleteResponses
> cor(CompleteResponses[,c(1,2,6)])
df$elevel
str(df$elevel)
df$elevel <- as.integer(df$elevel)
str(df$elevel)
df$elevel <- as.numerical(df$elevel)
df$elevel <- as.integer(df$elevel)
str(df$elevel)
-- LINEAR REGRESSION --
# Determine row to split on: split
split <- round(nrow(CompleteResponses) * .80)
# Create train
train<-CompleteResponses[1:split, ]
# Create test
test<-CompleteResponses[(split+1):nrow(CompleteResponses), ]
show(test)
mydataset <- CompleteResponses
cor(CompleteResponses)
names(CompleteResponses)
CompleteResponses[,c(1,2,6)]
cor(CompleteResponses[,c(1,2,6)])
str(CompleteResponses)
df <- CompleteResponses
> cor(CompleteResponses[,c(1,2,6)])
salary          age       credit
salary  1.000000000  0.007978566 -0.025126808
age     0.007978566  1.000000000 -0.004400692
credit -0.025126808 -0.004400692  1.000000000
df$elevel
str(df$elevel)
df$elevel <- as.integer(df$elevel)
str(df$elevel)
df$elevel <- as.numerical(df$elevel)
df$elevel <- as.integer(df$elevel)
str(df$elevel)
-- LINEAR REGRESSION --
# Determine row to split on: split
split <- round(nrow(CompleteResponses) * .80)
# Create train
train<-CompleteResponses[1:split, ]
# Create test
test<-CompleteResponses[(split+1):nrow(CompleteResponses), ]
show(test)
CompleteResponses <- read.csv(~/Desktop/UBIQUM/CompleteResponses.csv)
df <- read.csv(~/Desktop/UBIQUM/CompleteResponses.csv)
cor(CompleteResponses)
mydataset <- CompleteResponses
cor(CompleteResponses)
names(CompleteResponses)
CompleteResponses[,c(1,2,6)]
df$elevel
df$elevel <- as.integer(df$elevel)
str(df$elevel)
df$elevel <- as.numerical(df$elevel)
# Determine row to split on: split
split <- round(nrow(CompleteResponses) * .80)
# Create train
train<-CompleteResponses[1:split, ]
# Create test
test<-CompleteResponses[(split+1):nrow(CompleteResponses), ]
show(test)
View(df)
train<-CompleteResponses[1:split, ]
train<-CompleteResponses[1:split, ]
train<-CompleteResponses[1:split, ]
hist(age)
boxplot(cars)
boxplot(salary)
View(test)
boxplot(salary)
install.packages("rmdformats")
install.packages("tidyverse")
library(rmdformats)
help(rmdformats)
??rmdformats
mydataset <- CompleteResponses
cor(CompleteResponses)
names(CompleteResponses)
CompleteResponses[,c(1,2,6)]
cor(CompleteResponses[,c(1,2,6)])
str(CompleteResponses)
df <- CompleteResponses
> cor(CompleteResponses[,c(1,2,6)])
salary          age       credit
salary  1.000000000  0.007978566 -0.025126808
age     0.007978566  1.000000000 -0.004400692
credit -0.025126808 -0.004400692  1.000000000
df$elevel
str(df$elevel)
df$elevel <- as.integer(df$elevel)
str(df$elevel)
# Determine row to split on: split
split <- round(nrow(CompleteResponses) * .80)
# Create train
train<-CompleteResponses[1:split, ]
# Create test
test<-CompleteResponses[(split+1):nrow(CompleteResponses), ]
show(test)
LINEAR MODEL
# Fit lm model on train: model
model<-lm(price~.,train)
cor(CompleteResponses)
names(CompleteResponses)
CompleteResponses[,c(1,2,6)]
# Determine row to split on: split
split <- round(nrow(CompleteResponses) * .80)
# Create train
train<-CompleteResponses[1:split, ]
# Create test
test<-CompleteResponses[(split+1):nrow(CompleteResponses), ]
show(test)
View(test)
cor(CompleteResponses[,c(1,2,6)])
str(CompleteResponses)
df <- CompleteResponses
df$elevel
str(df$elevel)
df$elevel <- as.integer(df$elevel)
str(df$elevel)
library(caret, lib.loc = "/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library(caret)
set.seed(998)
# Determine row to split on: split
split <- round(nrow(CompleteResponses) * .80)
# Create trainset
train<-CompleteResponses[1:split, ]
# Create test
test<-CompleteResponses[(split+1):nrow(CompleteResponses), ]
show(test)
# Determine row to split on: split
split <- round(nrow(CompleteResponses) * .80)
# Create trainset
train<-CompleteResponses[1:split, ]
str(df$car)
df$car <- as.factor(df$cars)
str(df$car)
df$car <- as.factor(df$cars)
df$car <- as.factor(df$car)
str(df$car)
###IMPORT THE DATASET###
df <- CompleteResponses
###CORRELATION MATRIX TO SPOT RELATIONSHIPS###
cor(CompleteResponses)
names(CompleteResponses)
CompleteResponses[,c(1,2,6)]
cor(CompleteResponses[,c(1,2,6)])
str(CompleteResponses)
df2 <- CompleteResponses
View(df)
View(df)
#10 fold cross validation
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
rfFit1 <- train(SolarRad~., data = training, method = "rf", trControl=fitControl, tuneLength = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
rfFit1 <- train(SolarRad~., data = train, method = "rf", trControl=fitControl, tuneLength = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
rfFit1 <- train(Brand~., data = train, method = "rf", trControl=fitControl, tuneLength = 1)
show(train)
#create a 20% sample of the data
WholeYear <- CompleteResponses[sample(1:nrow(CompleteResponses), 7000,replace=FALSE),]
show(WholeYear)
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- 20percentDF[inTraining,]
testing <- 20percentDF[-inTraining,]
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- VentiDF[inTraining,]
#create a 20% sample of the data
VentiDF <- CompleteResponses[sample(1:nrow(CompleteResponses), 7000,replace=FALSE),]
show(20perce)
show(VentiDF)
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- VentiDF[inTraining,]
testing <- 20percentDF[-inTraining,]
testing <- VentiDF[-inTraining,]
#10 fold cross validation
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
rfFit1 <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 1)
#training results
rfFit1
###IMPORT THE DATASET###
df <- CompleteResponses
###IMPORT THE DATASET###
df <- CompleteResponses
###IMPORT THE DATASET###
df <- CompleteResponses
###IMPORT THE DATASET###
df <- CompleteResponses
rfFit1 <- train(car~., data = training, method = "rf", trControl=fitControl, tuneLength = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
M0D <- train(car~., data = CompleteResponses, method = "rf", trControl=fitControl, tuneLength = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
M0D <- train(car~., data = CompleteResponses, method = "rf", trControl=fitControl, tuneLength = 1)
print(M0D)
print(M0D)
print(M0D)
print(M0D)
M0D
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
M0D <- train(car~., data = training, method = "rf", trControl=fitControl, tuneLength = 1)
M0D
#load library and set seed
library(caret)
set.seed(998)
#create a 20% sample of the data
VentiDF <- CompleteResponses[sample(1:nrow(CompleteResponses), 7000,replace=FALSE),]
show(VentiDF)
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- VentiDF[inTraining,]
testing <- VentiDF[-inTraining,]
#10 fold cross validation
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
M0D <- train(car~., data = training, method = "rf", trControl=fitControl, tuneLength = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
M0D <- train(car~., data = training, method = "rf", trControl=fitControl, tuneLength = 1)
M0D
inTraining
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- VentiDF[inTraining,]
testing <- VentiDF[-inTraining,]
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
###EDUCATION LEVEL AS INTEGER
CompleteResponses$elevel
str(CompleteResponses$elevel)
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
CompleteResponses <- read.csv("../")
CompleteResponses <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv")
###EDUCATION LEVEL AS INTEGER
CompleteResponses$elevel
str(CompleteResponses$elevel)
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
str(CompleteResponses$elevel)
###CAR AS FACTOR
CompleteResponses$car
str(CompleteResponses$car)
CompleteResponses$car <- as.factor(CompleteResponses$car)
str(CompleteResponses$car)
#load library and set seed
library(caret)
set.seed(998)
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- VentiDF[inTraining,]
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- CompleteResponses[inTraining,]
testing <- CompleteResponses[-inTraining,]
#10 fold cross validation
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
M0D <- train(car~., data = training, method = "rf", trControl=fitControl, tuneLength = 1)
M0D
###IMPORT DATASET
CompleteResponses <- read.csv("../Desktop/UBIQUM/CompleteResponses.csv")
###EDUCATION LEVEL AS INTEGER
CompleteResponses$elevel
str(CompleteResponses$elevel)
CompleteResponses$elevel <- as.integer(CompleteResponses$elevel)
str(CompleteResponses$elevel)
###CAR AS FACTOR
CompleteResponses$car
str(CompleteResponses$car)
CompleteResponses$car <- as.factor(CompleteResponses$car)
str(CompleteResponses$car)
#load library and set seed
library(caret)
set.seed(998)
# define an 75%/25% train/test split of the dataset
inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- CompleteResponses[inTraining,]
testing <- CompleteResponses[-inTraining,]
#10 fold cross validation
fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)
#train Random Forest Regression model with a tuneLenght = 1 (trains with 1 mtry value for RandomForest)
M0D <- train(car~., data = training, method = "rf", trControl=fitControl, tuneLength = 1)
#training results
M0D
View(M0D)
View(M0D)
View(M0D)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
str(train)
str(training)
source('~/.active-rstudio-document', echo=TRUE)
