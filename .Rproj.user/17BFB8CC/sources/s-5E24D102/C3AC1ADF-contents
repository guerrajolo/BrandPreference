library(caret)
library(ggplot2)

#Import Dataset
CompleteResponses <- read.csv("~/Desktop/UBIQUM/CompleteResponses.csv")
SurveyIncomplete <- read.csv("~/Desktop/UBIQUM/SurveyIncomplete.csv")

#DataCleaning
SurveyIncomplete$elevel <- as.integer(SurveyIncomplete$elevel)
SurveyIncomplete$car <- as.factor(SurveyIncomplete$car)
SurveyIncomplete$brand <- as.factor(SurveyIncomplete$brand)
CompleteResponses$zipcode <- as.factor(CompleteResponses$zipcode)
CompleteResponses$age <- as.numeric(CompleteResponses$age)


set.seed(998)

# define an 75%/25% train/test split of the dataset

inTraining <- createDataPartition(CompleteResponses$brand, p = .75, list = FALSE)
training <- CompleteResponses[inTraining,]
testing <- CompleteResponses[-inTraining,]

#10 fold cross validation

fitControl <- trainControl(method = "repeatedcv", number = 10, repeats = 1)

#train Random Forest Regression model with a tuneLenght = 1 
#(trains with 1 mtry value for RandomForest)#

M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 10, list = FALSE )
###M0D <- train(brand~., data = training, method = "rf", trControl=fitControl, tuneLength = 2, list = FALSE )
### The Accuracy and the Kappa returned by using tunelenght = 10 does not provide significantly better outputs. 

print(M0D)
#  7424 samples
#  6 predictor
#  2 classes: '0', '1' 

#  Accuracy   Kappa    
#  0.9220084  0.8349224

varImp(M0D)
#Overall
#salary  100.00000
#age      60.50764
# credit   13.71266

###APPLY MODEL TO TESTSET 

PRED1 <- predict(M0D, testing)
PRED1
summary(PRED1)

#to ascertain how the model prioritized each feature in the training 
varImp(M0D)
################Overall
#salary  100.00000
#age      57.40333
#credit   13.27571
#zipcode   5.35328
#elevel    3.82464
#car15     0.24398
################
head(testing)


confusionMatrix(PRED1, testing$brand)
################
#Prediction    0    1
#          0  840  108
#          1   96 1430

#Accuracy : 0.9175         
#95% CI : (0.906, 0.9281)
#No Information Rate : 0.6217         
#P-Value [Acc > NIR] : <2e-16         
#Kappa : 0.8251         
#Mcnemar's Test P-Value : 0.4412  
################


#Prediction
BRAND <- predict(MODC5, SurveyIncomplete)
BRAND

postResample(BRAND)
str(BRAND)

#Insert the Prediction column in the SurveyIncomplete
SurveyIncomplete$brand <- BRAND


